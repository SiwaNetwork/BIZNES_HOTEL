"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏
"""

import requests
import json

def test_analytics_api():
    """–¢–µ—Å—Ç API –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    url = "http://127.0.0.1:5000/api/analytics"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        "scenario": "baseline",
        "variant": "A", 
        "equipment_type": "mini",
        "assembly_option": "shiwa_assembled",
        "assembly_variant": "80_20"
    }
    
    try:
        print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫—É...")
        response = requests.post(url, json=test_data)
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            data = result['data']
            summary = data['summary']
            charts = data['charts']
            metrics = data['metrics']
            
            print("\nüìä –û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò:")
            print(f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞: ${metrics['total_project_value']:,.0f}")
            print(f"ROI SHIWA: {metrics['shiwa_roi']:.1f}%")
            print(f"ROI ETECSA: {metrics['etecsa_roi']:.1f}%")
            print(f"ROI –æ—Ç–µ–ª–µ–π: {metrics['hotel_roi']:.1f}%")
            print(f"–ü–µ—Ä–∏–æ–¥ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {metrics['payback_period']['payback_months']:.1f} –º–µ—Å—è—Ü–µ–≤")
            
            print("\nüìà –î–ê–ù–ù–´–ï –î–õ–Ø –ì–†–ê–§–ò–ö–û–í:")
            print("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤:")
            for i, label in enumerate(charts['revenue_comparison']['labels']):
                print(f"  {label}: ${charts['revenue_comparison']['data'][i]:,.0f}")
            
            print("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏:")
            for i, label in enumerate(charts['profit_comparison']['labels']):
                print(f"  {label}: ${charts['profit_comparison']['data'][i]:,.0f}")
            
            print("\nüí∞ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –î–û–•–û–î–û–í SHIWA:")
            for i, label in enumerate(charts['shiwa_revenue_breakdown']['labels']):
                value = charts['shiwa_revenue_breakdown']['data'][i]
                percentage = (value / sum(charts['shiwa_revenue_breakdown']['data'])) * 100
                print(f"  {label}: ${value:,.0f} ({percentage:.1f}%)")
            
            print("\nüè¢ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –î–û–•–û–î–û–í ETECSA:")
            for i, label in enumerate(charts['etecsa_revenue_breakdown']['labels']):
                value = charts['etecsa_revenue_breakdown']['data'][i]
                percentage = (value / sum(charts['etecsa_revenue_breakdown']['data'])) * 100
                print(f"  {label}: ${value:,.0f} ({percentage:.1f}%)")
            
            print("\nüè® –í–´–ì–û–î–´ –î–õ–Ø –û–¢–ï–õ–ï–ô:")
            for i, label in enumerate(charts['hotel_benefits_breakdown']['labels']):
                value = charts['hotel_benefits_breakdown']['data'][i]
                percentage = (value / sum(charts['hotel_benefits_breakdown']['data'])) * 100
                print(f"  {label}: ${value:,.0f} ({percentage:.1f}%)")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return False

def test_different_assembly_analytics():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–±–æ—Ä–∫–∏"""
    url = "http://127.0.0.1:5000/api/analytics"
    
    assembly_options = ["shiwa_assembled", "etecsa_assembly", "mixed_approach"]
    
    print("\n=== –ê–ù–ê–õ–ò–¢–ò–ö–ê –î–õ–Ø –†–ê–ó–ù–´–• –í–ê–†–ò–ê–ù–¢–û–í –°–ë–û–†–ö–ò ===")
    
    results = {}
    
    for assembly in assembly_options:
        test_data = {
            "scenario": "baseline",
            "variant": "A",
            "equipment_type": "mini",
            "assembly_option": assembly,
            "assembly_variant": "80_20"
        }
        
        try:
            response = requests.post(url, json=test_data)
            if response.status_code == 200:
                result = response.json()
                data = result['data']
                summary = data['summary']
                metrics = data['metrics']
                
                results[assembly] = {
                    'shiwa_revenue': summary['shiwa']['total_revenue'],
                    'shiwa_profit': summary['shiwa']['net_profit'],
                    'etecsa_profit': summary['etecsa']['net_profit'],
                    'shiwa_roi': metrics['shiwa_roi'],
                    'etecsa_roi': metrics['etecsa_roi'],
                    'payback_months': metrics['payback_period']['payback_months']
                }
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {assembly}: {response.status_code}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {assembly}: {e}")
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    print(f"\n{'–í–∞—Ä–∏–∞–Ω—Ç —Å–±–æ—Ä–∫–∏':<25} {'–î–æ—Ö–æ–¥ SHIWA':<15} {'–ü—Ä–∏–±—ã–ª—å SHIWA':<15} {'–ü—Ä–∏–±—ã–ª—å ETECSA':<15} {'ROI SHIWA':<12} {'–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å':<12}")
    print("-" * 100)
    
    for assembly, data in results.items():
        print(f"{assembly:<25} ${data['shiwa_revenue']:<14,.0f} ${data['shiwa_profit']:<14,.0f} "
              f"${data['etecsa_profit']:<14,.0f} {data['shiwa_roi']:<11.1f}% {data['payback_months']:<11.1f}–º")

def test_equipment_types_analytics():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"""
    url = "http://127.0.0.1:5000/api/analytics"
    
    equipment_types = ["mini", "1u_2u"]
    
    print("\n=== –ê–ù–ê–õ–ò–¢–ò–ö–ê –î–õ–Ø –†–ê–ó–ù–´–• –¢–ò–ü–û–í –û–ë–û–†–£–î–û–í–ê–ù–ò–Ø ===")
    
    for eq_type in equipment_types:
        test_data = {
            "scenario": "baseline",
            "variant": "A",
            "equipment_type": eq_type,
            "assembly_option": "shiwa_assembled",
            "assembly_variant": "80_20"
        }
        
        try:
            response = requests.post(url, json=test_data)
            if response.status_code == 200:
                result = response.json()
                data = result['data']
                summary = data['summary']
                metrics = data['metrics']
                
                print(f"\n--- {eq_type.upper()} ---")
                print(f"–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {summary['equipment_name']}")
                print(f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞: ${metrics['total_project_value']:,.0f}")
                print(f"–î–æ—Ö–æ–¥ SHIWA: ${summary['shiwa']['total_revenue']:,.0f}")
                print(f"–ü—Ä–∏–±—ã–ª—å SHIWA: ${summary['shiwa']['net_profit']:,.0f}")
                print(f"–ü—Ä–∏–±—ã–ª—å ETECSA: ${summary['etecsa']['net_profit']:,.0f}")
                print(f"ROI SHIWA: {metrics['shiwa_roi']:.1f}%")
                print(f"ROI ETECSA: {metrics['etecsa_roi']:.1f}%")
                print(f"–ü–µ—Ä–∏–æ–¥ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {metrics['payback_period']['payback_months']:.1f} –º–µ—Å—è—Ü–µ–≤")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {eq_type}: {response.status_code}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {eq_type}: {e}")

if __name__ == "__main__":
    print("–¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ê–ù–ê–õ–ò–¢–ò–ö–ò")
    print("=" * 60)
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
    import time
    time.sleep(2)
    
    success = test_analytics_api()
    
    if success:
        test_different_assembly_analytics()
        test_equipment_types_analytics()
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("\nüéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ —Ç–∞–±–ª–∏—Ü!")
    else:
        print("\n‚ùå –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ –ø—Ä–æ—à–µ–ª")
