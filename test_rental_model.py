"""
–¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ –∞—Ä–µ–Ω–¥—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
"""

import requests
import json

def test_rental_model_api():
    """–¢–µ—Å—Ç API –¥–ª—è –º–æ–¥–µ–ª–∏ –∞—Ä–µ–Ω–¥—ã"""
    url = "http://127.0.0.1:5000/api/calculate"
    
    # –¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ –∞—Ä–µ–Ω–¥—ã (–≤–∞—Ä–∏–∞–Ω—Ç –ë)
    test_data = {
        "scenario": "baseline",
        "variant": "B",  # –ê—Ä–µ–Ω–¥–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        "hotels_count": 50,
        "monthly_fee": 500,
        "equipment_type": "mini",
        "assembly_option": "shiwa_assembled",
        "assembly_variant": "80_20"  # 80% SHIWA, 20% ETECSA
    }
    
    try:
        print("=== –¢–ï–°–¢ –ú–û–î–ï–õ–ò –ê–†–ï–ù–î–´ –û–ë–û–†–£–î–û–í–ê–ù–ò–Ø ===")
        print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {test_data}")
        print()
        
        response = requests.post(url, json=test_data)
        
        if response.status_code == 200:
            result = response.json()
            summary = result['data']['summary']
            
            print("‚úÖ –†–∞—Å—á–µ—Ç —É—Å–ø–µ—à–µ–Ω!")
            print(f"–í–∞—Ä–∏–∞–Ω—Ç: {summary['variant']}")
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π: {summary['hotels_count']}")
            print(f"–ê–±–æ–Ω–µ–Ω—Ç—Å–∫–∞—è –ø–ª–∞—Ç–∞: $500/–º–µ—Å")
            print()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á–µ—Ç—ã
            total_monthly = 50 * 500  # $25,000
            total_annual = total_monthly * 12  # $300,000
            
            print(f"–û–ë–©–ê–Ø –ê–ë–û–ù–ï–ù–¢–°–ö–ê–Ø –ü–õ–ê–¢–ê:")
            print(f"  –í –º–µ—Å—è—Ü: ${total_monthly:,}")
            print(f"  –í –≥–æ–¥: ${total_annual:,}")
            print()
            
            # –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è 80/20
            expected_shiwa = total_annual * 0.8  # $240,000
            expected_etecsa = total_annual * 0.2  # $60,000
            
            actual_shiwa = summary['shiwa']['total_revenue']
            actual_etecsa = summary['etecsa']['equipment_profit'] + summary['etecsa']['subscription_revenue']
            
            print(f"–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –î–û–•–û–î–û–í (80/20):")
            print(f"  –û–∂–∏–¥–∞–µ—Ç—Å—è SHIWA: ${expected_shiwa:,}")
            print(f"  –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ SHIWA: ${actual_shiwa:,}")
            print(f"  –û–∂–∏–¥–∞–µ—Ç—Å—è ETECSA: ${expected_etecsa:,}")
            print(f"  –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ ETECSA: ${actual_etecsa:,}")
            print()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞
            shiwa_diff = abs(actual_shiwa - expected_shiwa)
            etecsas_diff = abs(actual_etecsa - expected_etecsa)
            
            if shiwa_diff < 1:
                print("‚úÖ –†–∞—Å—á–µ—Ç SHIWA –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–µ SHIWA: —Ä–∞–∑–Ω–∏—Ü–∞ ${shiwa_diff:,}")
            
            if etecsas_diff < 1:
                print("‚úÖ –†–∞—Å—á–µ—Ç ETECSA –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–µ ETECSA: —Ä–∞–∑–Ω–∏—Ü–∞ ${etecsas_diff:,}")
            
            print()
            print(f"–î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
            print(f"  –î–æ—Ö–æ–¥ SHIWA –æ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: ${summary['shiwa']['equipment_revenue']:,}")
            print(f"  –î–æ—Ö–æ–¥ SHIWA –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏: ${summary['shiwa']['subscription_revenue']:,}")
            print(f"  –î–æ—Ö–æ–¥ ETECSA –æ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: ${summary['etecsa']['equipment_profit']:,}")
            print(f"  –î–æ—Ö–æ–¥ ETECSA –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏: ${summary['etecsa']['subscription_revenue']:,}")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return False

def test_50_50_model():
    """–¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ 50/50"""
    url = "http://127.0.0.1:5000/api/calculate"
    
    test_data = {
        "scenario": "baseline",
        "variant": "B",
        "hotels_count": 50,
        "monthly_fee": 500,
        "equipment_type": "mini",
        "assembly_option": "shiwa_assembled",
        "assembly_variant": "50_50"  # 50% SHIWA, 50% ETECSA
    }
    
    try:
        print("\n=== –¢–ï–°–¢ –ú–û–î–ï–õ–ò 50/50 ===")
        
        response = requests.post(url, json=test_data)
        
        if response.status_code == 200:
            result = response.json()
            summary = result['data']['summary']
            
            total_annual = 50 * 500 * 12  # $300,000
            expected_shiwa = total_annual * 0.5  # $150,000
            expected_etecsa = total_annual * 0.5  # $150,000
            
            actual_shiwa = summary['shiwa']['total_revenue']
            actual_etecsa = summary['etecsa']['equipment_profit'] + summary['etecsa']['subscription_revenue']
            
            print(f"–û–ñ–ò–î–ê–ï–¢–°–Ø:")
            print(f"  SHIWA: ${expected_shiwa:,}")
            print(f"  ETECSA: ${expected_etecsa:,}")
            print()
            print(f"–§–ê–ö–¢–ò–ß–ï–°–ö–ò:")
            print(f"  SHIWA: ${actual_shiwa:,}")
            print(f"  ETECSA: ${actual_etecsa:,}")
            
            shiwa_ok = abs(actual_shiwa - expected_shiwa) < 1
            etecsas_ok = abs(actual_etecsa - expected_etecsa) < 1
            
            if shiwa_ok and etecsas_ok:
                print("‚úÖ –ú–æ–¥–µ–ª—å 50/50 —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            else:
                print("‚ùå –û—à–∏–±–∫–∏ –≤ –º–æ–¥–µ–ª–∏ 50/50!")
            
            return shiwa_ok and etecsas_ok
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    print("–¢–ï–°–¢ –ú–û–î–ï–õ–ò –ê–†–ï–ù–î–´ –û–ë–û–†–£–î–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    import time
    time.sleep(2)
    
    success1 = test_rental_model_api()
    success2 = test_50_50_model()
    
    if success1 and success2:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –º–æ–¥–µ–ª–∏ –∞—Ä–µ–Ω–¥—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –†–∞—Å—á–µ—Ç—ã —Ç–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!")
    else:
        print("\n‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –º–æ–¥–µ–ª—å—é –∞—Ä–µ–Ω–¥—ã")
